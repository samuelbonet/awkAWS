Crear un fichero con el siguiente contenido:
John 25 Developer
Jane 30 Designer
Doe 22 Tester

1.Mostrar la segunda columna
awk '{print $2}' empleados.txt
--------------------------------
2.Mostrar filas donde la tercera columna sea Developer
awk '$3 == "Developer"' empleados.txt
--------------------------------
3.Sumar las edades y mostrar el total
awk '{sum += $2} END {print sum}' empleados.txt
--------------------------------
4.Contar cuántas personas tienen más de 25 años
awk '$2 > 25 {count++} END {print count}' empleados.txt
--------------------------------
5.Crear una nueva columna que indique si la persona es mayor o menos de 25 años
awk '{if ($2 >= 25) status="Mayor"; else status="Menor"; print $0, status}' empleados.txt
--------------------------------
6.Mostrar la media de edades
awk '{sum += $2; count++} END {if (count > 0) print sum / count}' empleados.txt
--------------------------------

Crear un fichero con el siguiente contenido:
	2021-04-03
	2022-07-07
	2023-12-05
1.Extraer año, mes y día por separado. Ejemplo de salida:
	Año: 2021, Mes: 04, Día: 03
	Año: 2022, Mes: 07, Día: 07
	Año: 2023, Mes: 12, Día: 05
awk -F- '{print "Año: " $1 ", Mes: " $2 ", Día: " $3}' fechas.txt

------------------------------------------------------------------

1.Verificar si un número introducido por el usuario es par o impar.
#!/bin/bash

# Pedir al usuario que introduzca un número
echo -n "Introduce un número: "
read numero

# Verificar si el número es par o impar
if [ $((numero % 2)) -eq 0 ]; then
    echo "El número $numero es par."
else
    echo "El número $numero es impar."
fi

chmod +x verificar_par_impar.sh (para hacer el script ejecutable)
./verificar_par_impar.sh (para ejecutar)
-------------------------------------------------------------------

2.Descargar un archivo (Sample zip Archive File Download (getsamplefiles.com, descomprimirlo y crear un tarball comprimido con el contenido.
#!/bin/bash
wget "https://getsamplefiles.com/sample-archive-files/zip/sample-1.zip -o "archivo.zip"
tar -cvzf "mi_backup.tar" archivo.zip
gzip "mi_backup.tar"

3.Crear un menú interactivo con las siguientes opciones:
  1.Fecha actual
  2.Usuario logeado
  3.Directorio home del usuario logeado
  4.Directorio actual
  5.Salir
#!/bin/bash

opcion=0
while [$opcion -ne 5]
do 
	echo"1.Fecha actual"
	echo"2.Usuario logeado"
	echo"3.Directorio home del usuario logeado"
	echo"4.Directorio actual"
	echo"5.Salir"
	read -p "Introduce una opcion" opcion

	case $opcion in
		1)) date;;
		2)) whoami;;
		3))echo $HOME;;
		4))pwd;;
	esac
done
--------------otra manera de hacerlo-------------------

# Función para mostrar la fecha actual
mostrar_fecha_actual() {
    echo "Fecha actual: $(date)"
}

# Función para mostrar el usuario logueado
mostrar_usuario_logueado() {
    echo "Usuario logueado: $(whoami)"
}

# Función para mostrar el directorio home del usuario logueado
mostrar_directorio_home() {
    echo "Directorio home del usuario logueado: $HOME"
}

# Función para mostrar el directorio actual
mostrar_directorio_actual() {
    echo "Directorio actual: $(pwd)"
}

# Menú interactivo
while true; do
    echo "Seleccione una opción:"
    echo "1. Fecha actual"
    echo "2. Usuario logueado"
    echo "3. Directorio home del usuario logueado"
    echo "4. Directorio actual"
    echo "5. Salir"
    read -p "Opción: " opcion

    case $opcion in
        1)
            mostrar_fecha_actual
            ;;
        2)
            mostrar_usuario_logueado
            ;;
        3)
            mostrar_directorio_home
            ;;
        4)
            mostrar_directorio_actual
            ;;
        5)
            echo "Saliendo..."
            exit 0
            ;;
        *)
            echo "Opción no válida. Por favor, seleccione una opción válida."
            ;;
    esac
    echo # Línea en blanco para separar las salidas
done

-------------------------------------------------------------------

4.Crear un informe de disco que se ejecute cada 5 minutos y se almacene en un archivo de registro.
#!/bin/bash

# Definir el archivo de registro
LOGFILE="/var/log/informe_disco.log"

# Fecha y hora actual
echo "Informe de disco - $(date)" >> $LOGFILE

# Comando para obtener el uso del disco
df -h >> $LOGFILE

# Línea en blanco para separar entradas
echo >> $LOGFILE

-------------------------------------------------------------------

LABORATORIO

1.Crear un usuario, iniciar sesión y actualizar los paquetes instalados.
useradd -c "Test user" jhon
passwd jhon
su jhon
apt-get update
usermod -aG sudo jhon

2.Lanzar un proceso, monitorizarlo y detenerlo forzosamente.
nano script5.sh

#!/bin/bash
while[1 -ne 2]
do
	echo "" >>uso_disco.log
done

nohup ./script5.sh & (Para que no se bloquee el proceso)
kill -9 PID
